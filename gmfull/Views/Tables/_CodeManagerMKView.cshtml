@using SqlDataProvider.Data;
@using System.Text;
@model GM.Service.Models.TableModel

@{
    Layout = "~/Views/Shared/_RenderLayout.cshtml";
    TableInfo item = Model.Info;
    string name = item.Class.Replace("Info", "");

    StringBuilder sb = new StringBuilder();
    sb.AppendLine(" ");
    sb.AppendLine("using System;");
    sb.AppendLine("using System.Collections.Generic;");
    sb.AppendLine("using log4net;");
    sb.AppendLine("using System.Reflection;");
    sb.AppendLine("using System.Threading;");
    sb.AppendLine("using Bussiness;");
    sb.AppendLine("using SqlDataProvider.Data;");
    sb.AppendLine("using System.Linq;");
    sb.AppendLine("namespace Bussiness.Managers");
    sb.AppendLine("{");
    sb.AppendLine("	public class " + name + "Mgr");
    sb.AppendLine("	{");
    sb.AppendLine("		private static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);");
    sb.AppendLine("		private static Dictionary<int, List<" + name + "Info>> m_" + TableTool.LowerFirstChar(name) + "s= new Dictionary<int, List<" + name + "Info>>();");
    sb.AppendLine("		private static ThreadSafeRandom random = new ThreadSafeRandom();");
    sb.AppendLine("		public static bool ReLoad()");
    sb.AppendLine("		{");
    sb.AppendLine("			try");
    sb.AppendLine("			{");
    sb.AppendLine("				" + name + "Info[] temp" + name + " = Load" + name + "Db();");
    sb.AppendLine("				Dictionary<int, List<" + name + "Info>> temp" + name + "s = Load" + name + "s(temp" + name + ");");
    sb.AppendLine("				if (temp" + name + ".Length > 0)");
    sb.AppendLine("				{");
    sb.AppendLine("					Interlocked.Exchange(ref m_" + TableTool.LowerFirstChar(name) + "s, temp" + name + "s);");
    sb.AppendLine("				}");
    sb.AppendLine("			}");
    sb.AppendLine("			catch (Exception e)");
    sb.AppendLine("			{");
    sb.AppendLine("				if (log.IsErrorEnabled)");
    sb.AppendLine("					log.Error(\"ReLoad " + name + "\", e);");
    sb.AppendLine("				return false;");
    sb.AppendLine("			}");
    sb.AppendLine("			return true;");
    sb.AppendLine("		}");
    sb.AppendLine("		public static bool Init()");
    sb.AppendLine("		{");
    sb.AppendLine("			return ReLoad();");
    sb.AppendLine("		}");
    sb.AppendLine("		public static " + name + "Info[] Load" + name + "Db()");
    sb.AppendLine("		{");
    if (item.Type == 1)
    {
        sb.AppendLine("			using (PlayerBussiness pb = new PlayerBussiness())");
    }
    else
    {
        sb.AppendLine("			using (ProduceBussiness pb = new ProduceBussiness())");
    }
    sb.AppendLine("			{");
    sb.AppendLine("				" + name + "Info[] infos = pb.GetAll" + name + "();");
    sb.AppendLine("				return infos;");
    sb.AppendLine("			}");
    sb.AppendLine("		}");
    sb.AppendLine("		public static Dictionary<int, List<" + name + "Info>> Load" + name + "s(" + name + "Info[] " + TableTool.LowerFirstChar(name) + "s)");
    sb.AppendLine("		{");
    sb.AppendLine("			Dictionary<int, List<" + name + "Info>> infos = new Dictionary<int, List<" + name + "Info>>();");
    sb.AppendLine("			foreach (" + name + "Info info in " + TableTool.LowerFirstChar(name) + "s)");
    sb.AppendLine("			{");
    sb.AppendLine("				if (!infos.Keys.Contains(info.ID))");
    sb.AppendLine("				{");
    sb.AppendLine("					IEnumerable<" + name + "Info> temp = " + TableTool.LowerFirstChar(name) + "s.Where(s => s.ID == info.ID);");
    sb.AppendLine("					infos.Add(info.ID, temp.ToList());");
    sb.AppendLine("				}");
    sb.AppendLine("			}");
    sb.AppendLine("			return infos;");
    sb.AppendLine("		}");
    sb.AppendLine("		public static List<" + name + "Info> Find" + name + "s(int id)");
    sb.AppendLine("		{");
    sb.AppendLine("			if (m_" + TableTool.LowerFirstChar(name) + "s.ContainsKey(id))");
    sb.AppendLine("			{");
    sb.AppendLine("				List<" + name + "Info> items = m_" + TableTool.LowerFirstChar(name) + "s[id];");
    sb.AppendLine("				return items;");
    sb.AppendLine("			}");
    sb.AppendLine("			return null;");
    sb.AppendLine("		}");
    sb.AppendLine("	}");
    sb.AppendLine("}");
}
<h4>@item.Name <i class="fa fa-angle-right"></i><span class="text-danger"> Manager Multi Key</span></h4>
<div style="overflow-y:auto; height:450px">
<pre class="line-numbers">
    <code class="language-csharp" id="highlight-code">
        @sb.ToString()
    </code>
</pre>
</div>
@section Scripts{
    <script>
        $(function () {

            navActive('Manager');

            var code = $('#highlight-code')[0];
            Prism.highlightElement(code);

            ZeroCopy.init();
        });
    </script>
}