@model List<SqlDataProvider.Data.ServerInfo>
@{

    ViewBag.Title = "Remote";
}
<!-- Metro Notification Style -->
<link rel="stylesheet" type="text/css" href="@StaticFunction.Host("gm/Backend/css/MetroNotificationStyle.min.css")">
<!--Header -->
<div class="content-header">
    <div class="header-section">
        <h1>
            <i class="hi hi-wrench"></i>Remote<br><small>Easy remote server ddtank any where!</small>
        </h1>
    </div>
</div>
<ul class="breadcrumb breadcrumb-top">
    <li>Trang</li>
    <li>Service</li>
    <li><a href="">Remote</a></li>
</ul>
<!-- END -->
<!--Content -->
<div id="remote-container" class="block full">
    <div class="text-center text-warning">
        <p>@Html.Raw(StaticFunction.GetTranslation("Views.WaitLoading"))</p>
    </div>
</div>
<!-- END -->
@section scripts {
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="@StaticFunction.Host("Scripts/jquery.signalR-2.2.0.min.js")"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="@StaticFunction.Host("signalr/hubs")"></script>

    <!-- Metro Notification JS -->
    <script src="@StaticFunction.Host("Scripts/MetroNotification.js")"></script>
    <script>
        $(function() {

            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.remoteHub;
            // Create a function that the hub can call back to display messages.
            chat.client.sendRemoteCommand = function(name, command) {
                // Add the message to the page.
                if ($.isNumeric(name)) {
                    showGrowl('Server <' + name + '>: ' + command, 'success');
                } else {
                    showGrowl(command, 'warning', null, null, 7000);
                }
            };

            // Start the connection.
            $.connection.hub.start()
                .done(function() {
                    console.log('Now connected, connection ID=' + $.connection.hub.id);
                    startReresh();
                })
                .fail(function() { console.log('Could not Connect!'); });
        });

        var timer;
        var timer_is_on = 0;

        function timedReresh() {
            var loadurl = '@Url.Action("GetServerList", "Service")';
            $.get(loadurl, function(data) {
                $('#remote-container').html(data);
            });
            timer = setTimeout(function() { timedReresh() }, 5000);
        }

        function startReresh() {
            if (!timer_is_on) {
                timer_is_on = 1;
                timedReresh();
            }
        }

        function stopReresh() {
            clearTimeout(timer);
            timer_is_on = 0;
        }
    </script>
}